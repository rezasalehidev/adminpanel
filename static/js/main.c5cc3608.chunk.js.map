{"version":3,"sources":["context/authcontext.js","polyfill.js","App.js","serviceWorker.js","index.js","context/GetToken.js"],"names":["AuthContext","React","createContext","authReducer","state","action","type","token","payload","localStorage","setItem","getItem","history","replace","removeItem","push","AuthContextProvider","props","useReducer","dispatch","Provider","value","children","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","DefaultLayout","lazy","Login","Register","Page404","Page500","App","Suspense","fallback","className","exact","path","name","render","Component","Boolean","location","hostname","match","getToken","axios","defaults","baseURL","headers","post","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAEaA,EAAcC,IAAMC,gBAE3BC,EAAc,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,QACH,IAAMC,EAAQF,EAAOG,QAErB,OADAC,aAAaC,QAAQ,QAASH,GACvB,CAAEH,MAAOG,GAElB,IAAK,QACUE,aAAaE,QAAQ,UAEhCN,EAAOG,QAAQI,QAAQC,QAAQ,KAEjC,MACF,IAAK,SACHJ,aAAaK,WAAW,SACxBT,EAAOG,QAAQI,QAAQG,KAAK,KAC5B,MACF,QACE,OAAOX,IAcEY,IAVa,SAACC,GAAW,IAAD,EACXC,qBAAWf,EAAa,IADb,mBAC9BC,EAD8B,KACvBe,EADuB,KAGrC,OACE,kBAACnB,EAAYoB,SAAb,CAAsBC,MAAO,CAAEjB,QAAOe,aACnCF,EAAMK,Y,o/DCAb,WAEE,GAAmC,oBAAvBC,OAAOC,YAA6B,OAAO,EAEvD,SAASA,EAAcC,EAAOC,GAC5BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMC,SAASC,YAAa,eAEhC,OADAF,EAAIG,gBAAiBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC/DE,EAGTP,EAAYW,UAAYZ,OAAOa,MAAMD,UAErCZ,OAAOC,YAAcA,EAbvB,G,sHCpBMa,EAAgBpC,IAAMqC,MAAK,kBAAM,0DAGjCC,EAAQtC,IAAMqC,MAAK,kBAAM,yDACzBE,EAAWvC,IAAMqC,MAAK,kBAAM,yDAC5BG,EAAUxC,IAAMqC,MAAK,kBAAM,kCAC3BI,EAAUzC,IAAMqC,MAAK,kBAAM,kCA8ClBK,E,uKA1CX,OACE,kBAAC,gBAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SAhBtB,yBAAKC,UAAU,oCAAf,eAiBQ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,KAAK,aACLC,OAAQ,SAACjC,GAAD,OAAW,kBAACsB,EAAUtB,MAEhC,kBAAC,IAAD,CACE8B,OAAK,EACLC,KAAK,YACLC,KAAK,gBACLC,OAAQ,SAACjC,GAAD,OAAW,kBAACuB,EAAavB,MAEnC,kBAAC,IAAD,CACE8B,OAAK,EACLC,KAAK,OACLC,KAAK,WACLC,OAAQ,SAACjC,GAAD,OAAW,kBAACwB,EAAYxB,MAElC,kBAAC,IAAD,CACE8B,OAAK,EACLC,KAAK,OACLC,KAAK,WACLC,OAAQ,SAACjC,GAAD,OAAW,kBAACyB,EAAYzB,MAElC,kBAAC,IAAD,CACE+B,KAAK,IACLC,KAAK,OACLC,OAAQ,SAACjC,GAAD,OAAW,kBAACoB,EAAkBpB,c,GAlCpCkC,aCTEC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2D,qBCJAhD,ECZW,WACf,IAAMA,EAAQE,aAAaE,QAAQ,SACnC,OAAIJ,GAGK,GDOGiD,GAGdC,IAAMC,SAASC,QAAU,0CACzBF,IAAMC,SAASE,QAAQC,KAAvB,OAAwC,mBACxCJ,IAAMC,SAASE,QAAQC,KAAvB,MAAuCtD,EAEvCuD,IAASZ,OAAO,kBAAC,EAAD,MAASlB,SAAS+B,eAAe,SDsG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c5cc3608.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nexport const AuthContext = React.createContext();\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"login\":\r\n      const token = action.payload;\r\n      localStorage.setItem(\"token\", token);\r\n      return { state: token };\r\n\r\n    case \"check\":\r\n      const user = localStorage.getItem(\"token\");\r\n      if (!user) {\r\n        action.payload.history.replace(\"/\");\r\n      }\r\n      break;\r\n    case \"logout\":\r\n      localStorage.removeItem(\"token\");\r\n      action.payload.history.push(\"/\");\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst AuthContextProvider = (props) => {\r\n  const [state, dispatch] = useReducer(authReducer, \"\");\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ state, dispatch }}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n","/*\n* required polyfills\n*/\nimport \"core-js\";\nimport 'core-js/features/set/map';\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es/symbol'\n// import 'core-js/es/object'\n// import 'core-js/es/function'\n// import 'core-js/es/parse-int'\n// import 'core-js/es/parse-float'\n// import 'core-js/es/number'\n// import 'core-js/es/math'\n// import 'core-js/es/string'\n// import 'core-js/es/date'\n// import 'core-js/es/array'\n// import 'core-js/es/regexp'\n// import 'core-js/es/map'\n// import 'core-js/es/weak-map'\n// import 'core-js/es/set'\n// import 'core-js/es/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n(function () {\n\n  if ( typeof window.CustomEvent === \"function\" ) return false\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    var evt = document.createEvent( 'CustomEvent' )\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n// import { renderRoutes } from 'react-router-config';\nimport \"./App.scss\";\nimport AuthContextProvider from \"./context/authcontext\";\n\nconst loading = () => (\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\n);\n\n// Containers\nconst DefaultLayout = React.lazy(() => import(\"./containers/DefaultLayout\"));\n\n// Pages\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\nconst Register = React.lazy(() => import(\"./views/Pages/Register\"));\nconst Page404 = React.lazy(() => import(\"./views/Pages/Page404\"));\nconst Page500 = React.lazy(() => import(\"./views/Pages/Page500\"));\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <React.Suspense fallback={loading()}>\n          <AuthContextProvider>\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                name=\"Login Page\"\n                render={(props) => <Login {...props} />}\n              />\n              <Route\n                exact\n                path=\"/register\"\n                name=\"Register Page\"\n                render={(props) => <Register {...props} />}\n              />\n              <Route\n                exact\n                path=\"/404\"\n                name=\"Page 404\"\n                render={(props) => <Page404 {...props} />}\n              />\n              <Route\n                exact\n                path=\"/500\"\n                name=\"Page 500\"\n                render={(props) => <Page500 {...props} />}\n              />\n              <Route\n                path=\"/\"\n                name=\"Home\"\n                render={(props) => <DefaultLayout {...props} />}\n              />\n            </Switch>\n          </AuthContextProvider>\n        </React.Suspense>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\"; // For IE 9-11 support\nimport \"react-app-polyfill/stable\";\n// import 'react-app-polyfill/ie11'; // For IE 11 support\nimport \"./polyfill\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\nimport getToken from \"./context/GetToken\";\nconst token = getToken();\n\n// axios.defaults.baseURL = \"https://proshop.iran.liara.run/graphql\";\naxios.defaults.baseURL = \"https://proshop50.herokuapp.com/graphql\";\naxios.defaults.headers.post[\"Accept\"] = \"application/json\";\naxios.defaults.headers.post[\"token\"] = token;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const GetToken = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    return token;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport default GetToken;\r\n"],"sourceRoot":""}